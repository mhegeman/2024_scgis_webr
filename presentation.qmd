
---
title: "Shiny Happy People Sharing Geospatial Data"
author:  Bobby Sayers and Melissa Albino Hegeman
date: September 6, 2024
format: 
  pptx: 
    reference-doc: 
      decpptdark16X9.potx
---

## Disclaimer

The opinions represented here are our own and do not reflect NYS policy.


## Who we are

::: columns

::: {.column width="35%"}
- Bobby Sayers  
- Melissa Albino Hegeman  
:::

::: {.column width="65%"}
- Map nerds
- Marine Biology/Fisheries Management  
- R/Python/SQL users

:::
:::

::: notes

Who are we and why should you listen to us?

Melissa:
I am the fisheries data manager and I work with trip level commercial fishing data. I am also the GIS coordinator for the Division of Marine Resources. I've been using SQL, R, and ESRI products for ....

Bobby: 
I am the Environmental Program Specialist in Marine Resources. Provide support for GIS to the division. Using R, Python and ESRI tools. 

:::

## Some Common Roadblocks

- Expensive servers and hosting solutions üí∞  
- Proprietary software üíæ
- Complex installation processes üß© 
- Ongoing maintenance üõ†

::: notes
Melissa:

As data analysists we help programs get answers from their data. We get all sorts of questions and use all types of data, but geospatial data has been a real sticking point lately. Certain geospatial tasks are just standard now, people don't even know it is GIS. Things like Google Maps have set peoples expectations pretty high. People want to zoom, pan, compare different data sets, click on maps for more information, etc. There is an expectation of interactivity. Traditionally that type of functionality has required more enterprise level tools and/or software, or a server to host the app. More resources than an average individual or small office may have available. 

:::

## {auto-animate=true}

:::: columns
::: {.column width="50%"}
![](assets/shiny.png)
:::
::: {.column width="50%"}
:::
::::

::: notes

Melissa:
In the past we've used locally running Shiny Apps to address these problems, but that requires the user to have R running on their computer and maintain that installation as well as the repository the has the Shiny App. 
:::

## {auto-animate=true}

:::: columns
::: {.column width="50%"}
![](assets/shiny.png)
:::
::: {.column width="50%"}
::: {.incremental}
- Web application framework
- Available in both R and Python
:::
:::
::::

::: notes
Melissa: 
Shiny is a web application framework that allows you to create interactive web applications directly from R or Python. It is a great tool for creating interactive data visualizations and dashboards.

Is anyone currently using Shiny? For R or Python?
:::

## {transition="none"}

:::: columns
::: {.column width="50%"}
![](assets/shiny.png)
:::
::: {.column width="50%"}
- Web application framework
- Available in both R and Python
![](assets/pyodide_logo.png){.fragment}
![](assets/webr.png){.fragment}
:::
::::

::: notes
Melissa: 
In the last few years we've started hearing about WebR and Pyodide. These technologies allow people to use R and Python in the browser - no installation required. 
:::


## Web Assembly

- Allows code written in other languages to run in web browsers
- Near-native performance
- Runs in a secure sandbox
- Key to run R and Python applications without a server

::: notes

We aren't going to get into the weeds too much, but for the purposes of this presentation it allows us to run R and Python in the browser. It is fast and secure. 

If you are old enough to remember Adobe Flash games it is a similar idea, but secure. 

:::


## The Challenge 

- Make an interactive map üó∫
- Compare two data sources üíª
- Keep it private üîè
- Keep it consistent ‚úÖ


::: notes
Bobby:
We decided to create a challenge for ourselves to see if webR and Pyodide could address some of our issues. 
Our goal was to create a basic, light-weight interactive map that anyone can use without installing anything. 

:::

## *Free and Open-Source Options

We wanted to use free and opensource options because money and hardware are such an impediment, but..
FFOS comes with their own challenges that we want to acknowledge. 

- lack of local IT support
- organizational approval

::: notes
Bobby
Our preference is always free and open-source software. This is important for cost issues, but also makes everything more repeatable. 
But nothing is perfect so you do need to be aware of organizational restrictions on installation, platform compatibility, and the technical expertise of the people who will be using your app.
:::



## Shinylive

- Web-based solution for interactive applications
- Leverages WebAssembly technology
- Allows creation of lightweight, serverless apps
- Supports both R and Python

::: notes
Earlier we talked about Shiny. ShinyLive is the web assembly version of shiny. It isn't a programing language by itself, but it was converted to work with both pyodide (Python) and webR (R). Since we've already been using Shiny, it made sense to continue with a framework that we were familiar with. 
:::

## Requirements

- Runs entirely in the browser
- Supports file uploads
- Integrates with popular libraries (e.g., leaflet)

::: notes

Our proof of concept app MUST run entirely in the browser, allow file uploads, and work with libraries we are already using. 

:::

## The App

:::: columns

::: {.column}
![](assets/run_dmr.jpg){width="100%"}
:::

::: {.column}

![](assets/jones_beach.jpg){height="60%"}

![](assets/summer_run.png){height="40%"}
:::
::::

::: notes

We were looking for a low-stakes project to make a proof of concept app. Our office as a running group that participates in Long Island Parks Summer Run Series every year. We thought it would be cool to make an app that would allow us to compare our performances year to year and see how we were improving... or not and compare our results on the same races. In a non competitive way :) 

We were all using different apps to track our runs. Fortunately, all of these apps support exports using the .tcx standard. Training Center XML from Garmin and it has become the standard. GPS track, heart rate, running cadence, bike sensors, etc. 

:::


## Demo

[WebR example](https://sayersr.github.io/2024_scgis_tcx_webr/)
[Pyodide example](https://sayersr.github.io/2024_scgis_tcx_pyodide/)
- uploading files
- using publicly available web services


::: notes
We want our app to accept tcx files, plot the gps track, and graph our heart rate. 

We're going to show you some very un-aesthetic examples of the features we really wanted to implement. Again, these apps are meant to be very lightweight and potentially replace the lower level licenses that we mentioned earlier. 

:::

## Benefits

:::: columns
::: {.column}
Pros

- Provide a consistent analytics environment
- Access advanced geospatial tools through a web browser
- Upload and analyze personal data securely
- Collaborate easily by sharing a single URL/file
:::

::: {.column}
Cons

- Can't access network resources (such as a SQL server)
- Dependent on internet connection to access Web Assembly components
- Dependent on the speed of your local machine
:::
::::


::: notes

Benefits to the creators and the end users. 

Everyone is using the same 'stuff'. Trouble shooting becomes easier because everyone is using the same source and you can feelconfident that outputs are consistent. Keeps private stuff private. 

:::

## Next Steps

- Use public web feature services
- Export results as pdf or table
- Additional files types (.csv, .shp, etc.)
- Calculate distance or create a buffer

## Questions?

**Melissa Albino Hegeman:** melissa.albino@dec.ny.gov
**Bobby Sayers:** robert.sayers@dec.ny.gov


Presentation slides: 
https://github.com/mhegeman/2024_scgis_webr


